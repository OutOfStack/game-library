basePath: /api
definitions:
  model.Company:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  model.CreateGameRequest:
    properties:
      developer:
        type: string
      genresIds:
        items:
          type: integer
        type: array
      logoUrl:
        type: string
      name:
        type: string
      platformsIDs:
        items:
          type: integer
        type: array
      releaseDate:
        type: string
      screenshots:
        items:
          type: string
        type: array
      summary:
        type: string
      websites:
        items:
          type: string
        type: array
    required:
    - developer
    - name
    type: object
  model.CreateRatingRequest:
    properties:
      rating:
        description: 0 - remove rating
        maximum: 5
        minimum: 0
        type: integer
    type: object
  model.GameResponse:
    properties:
      developers:
        items:
          $ref: '#/definitions/model.Company'
        type: array
      genres:
        items:
          $ref: '#/definitions/model.Genre'
        type: array
      id:
        type: integer
      logoUrl:
        type: string
      name:
        type: string
      platforms:
        items:
          $ref: '#/definitions/model.Platform'
        type: array
      publishers:
        items:
          $ref: '#/definitions/model.Company'
        type: array
      rating:
        type: number
      releaseDate:
        type: string
      screenshots:
        items:
          type: string
        type: array
      slug:
        type: string
      summary:
        type: string
      websites:
        items:
          type: string
        type: array
    type: object
  model.GamesResponse:
    properties:
      count:
        type: integer
      games:
        items:
          $ref: '#/definitions/model.GameResponse'
        type: array
    type: object
  model.Genre:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  model.GetUserRatingsRequest:
    properties:
      gameIds:
        items:
          type: integer
        type: array
    type: object
  model.IDResponse:
    properties:
      id:
        type: integer
    type: object
  model.Platform:
    properties:
      abbreviation:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  model.RatingResponse:
    properties:
      gameId:
        type: integer
      rating:
        type: integer
    type: object
  model.UpdateGameRequest:
    properties:
      developer:
        type: string
      genresIds:
        items:
          type: integer
        type: array
      logoUrl:
        type: string
      name:
        type: string
      platforms:
        items:
          type: integer
        type: array
      releaseDate:
        type: string
      screenshots:
        items:
          type: string
        type: array
      summary:
        type: string
      websites:
        items:
          type: string
        type: array
    type: object
  web.ErrorResponse:
    properties:
      error:
        type: string
      fields:
        items:
          $ref: '#/definitions/web.FieldError'
        type: array
    type: object
  web.FieldError:
    properties:
      error:
        type: string
      field:
        type: string
    type: object
host: localhost:8000
info:
  contact: {}
  description: API for game library service
  termsOfService: http://swagger.io/terms/
  title: Game library API
  version: "0.3"
paths:
  /companies/top:
    get:
      description: returns top companies based on amount of games having it
      operationId: get-top-companies
      parameters:
      - description: company type (dev or pub)
        enum:
        - pub
        - dev
        in: query
        name: type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Company'
            type: array
        "400":
          description: Invalid or missing company type
          schema:
            $ref: '#/definitions/web.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.ErrorResponse'
      summary: Get top companies
  /games:
    get:
      description: returns paginated games
      operationId: get-games
      parameters:
      - description: page size
        in: query
        name: pageSize
        type: integer
      - description: page
        in: query
        name: page
        type: integer
      - description: order by
        enum:
        - default
        - name
        - releaseDate
        in: query
        name: orderBy
        type: string
      - description: name filter
        in: query
        name: name
        type: string
      - description: genre filter
        in: query
        name: genre
        type: integer
      - description: developer id filter
        in: query
        name: developer
        type: integer
      - description: publisher id filter
        in: query
        name: publisher
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GamesResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.ErrorResponse'
      summary: Get games
    post:
      consumes:
      - application/json
      description: creates new game
      operationId: create-game
      parameters:
      - description: create game
        in: body
        name: game
        required: true
        schema:
          $ref: '#/definitions/model.CreateGameRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.IDResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.ErrorResponse'
      summary: Create game
  /games/{id}:
    delete:
      consumes:
      - application/json
      description: deletes game by ID
      operationId: delete-game
      parameters:
      - description: Game ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/web.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/web.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.ErrorResponse'
      summary: Delete game
    get:
      description: returns game by ID
      operationId: get-game-by-id
      parameters:
      - description: Game ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GameResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/web.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.ErrorResponse'
      summary: Get game
    patch:
      consumes:
      - application/json
      description: updates game by ID
      operationId: update-game
      parameters:
      - description: Game ID
        in: path
        name: id
        required: true
        type: integer
      - description: update game
        in: body
        name: game
        required: true
        schema:
          $ref: '#/definitions/model.UpdateGameRequest'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/web.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/web.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.ErrorResponse'
      summary: Update game
  /games/{id}/rate:
    post:
      consumes:
      - application/json
      description: rates game
      operationId: rate-game
      parameters:
      - description: game ID
        in: path
        name: id
        required: true
        type: integer
      - description: game rating
        in: body
        name: rating
        required: true
        schema:
          $ref: '#/definitions/model.CreateRatingRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.RatingResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/web.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.ErrorResponse'
      summary: Rate game
  /genres:
    get:
      description: returns all genres
      operationId: get-genres
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Genre'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.ErrorResponse'
      summary: Get genres
  /genres/top:
    get:
      description: returns top genres based on amount of games having it
      operationId: get-top-genres
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Genre'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.ErrorResponse'
      summary: Get top genres
  /platforms:
    get:
      description: returns all platforms
      operationId: get-platforms
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Platform'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.ErrorResponse'
      summary: Get platforms
  /user/ratings:
    post:
      description: returns user ratings for specified games
      operationId: get-user-ratings
      parameters:
      - description: games ids
        in: body
        name: gameIds
        required: true
        schema:
          $ref: '#/definitions/model.GetUserRatingsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: integer
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.ErrorResponse'
      summary: Get user ratings for specified games
schemes:
- http
swagger: "2.0"
