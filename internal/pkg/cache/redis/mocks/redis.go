// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pkg/cache/redis.go
//
// Generated by this command:
//
//	mockgen -source=internal/pkg/cache/redis.go -destination=internal/pkg/cache/redis/mocks/redis.go -package=cache_mock
//

// Package cache_mock is a generated GoMock package.
package cache_mock

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockRedisClient is a mock of RedisClient interface.
type MockRedisClient struct {
	ctrl     *gomock.Controller
	recorder *MockRedisClientMockRecorder
	isgomock struct{}
}

// MockRedisClientMockRecorder is the mock recorder for MockRedisClient.
type MockRedisClientMockRecorder struct {
	mock *MockRedisClient
}

// NewMockRedisClient creates a new mock instance.
func NewMockRedisClient(ctrl *gomock.Controller) *MockRedisClient {
	mock := &MockRedisClient{ctrl: ctrl}
	mock.recorder = &MockRedisClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRedisClient) EXPECT() *MockRedisClientMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockRedisClient) Delete(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRedisClientMockRecorder) Delete(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRedisClient)(nil).Delete), ctx, key)
}

// DeleteByMatch mocks base method.
func (m *MockRedisClient) DeleteByMatch(ctx context.Context, pattern string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByMatch", ctx, pattern)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByMatch indicates an expected call of DeleteByMatch.
func (mr *MockRedisClientMockRecorder) DeleteByMatch(ctx, pattern any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByMatch", reflect.TypeOf((*MockRedisClient)(nil).DeleteByMatch), ctx, pattern)
}

// GetStruct mocks base method.
func (m *MockRedisClient) GetStruct(ctx context.Context, key string, value any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStruct", ctx, key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetStruct indicates an expected call of GetStruct.
func (mr *MockRedisClientMockRecorder) GetStruct(ctx, key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStruct", reflect.TypeOf((*MockRedisClient)(nil).GetStruct), ctx, key, value)
}

// SetStruct mocks base method.
func (m *MockRedisClient) SetStruct(ctx context.Context, key string, value any, ttl time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStruct", ctx, key, value, ttl)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetStruct indicates an expected call of SetStruct.
func (mr *MockRedisClientMockRecorder) SetStruct(ctx, key, value, ttl any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStruct", reflect.TypeOf((*MockRedisClient)(nil).SetStruct), ctx, key, value, ttl)
}
