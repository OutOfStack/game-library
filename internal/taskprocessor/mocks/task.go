// Code generated by MockGen. DO NOT EDIT.
// Source: internal/taskprocessor/task.go
//
// Generated by this command:
//
//	mockgen -source=internal/taskprocessor/task.go -destination=internal/taskprocessor/mocks/task.go -package=taskprocessor_mock
//

// Package taskprocessor_mock is a generated GoMock package.
package taskprocessor_mock

import (
	context "context"
	reflect "reflect"
	time "time"

	model "github.com/OutOfStack/game-library/internal/app/game-library-api/model"
	igdb "github.com/OutOfStack/game-library/internal/client/igdb"
	pgx "github.com/jackc/pgx/v5"
	gomock "go.uber.org/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
	isgomock struct{}
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// BeginTx mocks base method.
func (m *MockStorage) BeginTx(ctx context.Context) (pgx.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTx", ctx)
	ret0, _ := ret[0].(pgx.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTx indicates an expected call of BeginTx.
func (mr *MockStorageMockRecorder) BeginTx(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTx", reflect.TypeOf((*MockStorage)(nil).BeginTx), ctx)
}

// CreateCompany mocks base method.
func (m *MockStorage) CreateCompany(ctx context.Context, c model.Company) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCompany", ctx, c)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCompany indicates an expected call of CreateCompany.
func (mr *MockStorageMockRecorder) CreateCompany(ctx, c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCompany", reflect.TypeOf((*MockStorage)(nil).CreateCompany), ctx, c)
}

// CreateGame mocks base method.
func (m *MockStorage) CreateGame(ctx context.Context, cg model.CreateGame) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGame", ctx, cg)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGame indicates an expected call of CreateGame.
func (mr *MockStorageMockRecorder) CreateGame(ctx, cg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGame", reflect.TypeOf((*MockStorage)(nil).CreateGame), ctx, cg)
}

// CreateGenre mocks base method.
func (m *MockStorage) CreateGenre(ctx context.Context, g model.Genre) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGenre", ctx, g)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGenre indicates an expected call of CreateGenre.
func (mr *MockStorageMockRecorder) CreateGenre(ctx, g any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGenre", reflect.TypeOf((*MockStorage)(nil).CreateGenre), ctx, g)
}

// GetCompanies mocks base method.
func (m *MockStorage) GetCompanies(ctx context.Context) ([]model.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompanies", ctx)
	ret0, _ := ret[0].([]model.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompanies indicates an expected call of GetCompanies.
func (mr *MockStorageMockRecorder) GetCompanies(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompanies", reflect.TypeOf((*MockStorage)(nil).GetCompanies), ctx)
}

// GetGameIDByIGDBID mocks base method.
func (m *MockStorage) GetGameIDByIGDBID(ctx context.Context, igdbID int64) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGameIDByIGDBID", ctx, igdbID)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGameIDByIGDBID indicates an expected call of GetGameIDByIGDBID.
func (mr *MockStorageMockRecorder) GetGameIDByIGDBID(ctx, igdbID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGameIDByIGDBID", reflect.TypeOf((*MockStorage)(nil).GetGameIDByIGDBID), ctx, igdbID)
}

// GetGenres mocks base method.
func (m *MockStorage) GetGenres(ctx context.Context) ([]model.Genre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGenres", ctx)
	ret0, _ := ret[0].([]model.Genre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGenres indicates an expected call of GetGenres.
func (mr *MockStorageMockRecorder) GetGenres(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGenres", reflect.TypeOf((*MockStorage)(nil).GetGenres), ctx)
}

// GetPlatforms mocks base method.
func (m *MockStorage) GetPlatforms(ctx context.Context) ([]model.Platform, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlatforms", ctx)
	ret0, _ := ret[0].([]model.Platform)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlatforms indicates an expected call of GetPlatforms.
func (mr *MockStorageMockRecorder) GetPlatforms(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlatforms", reflect.TypeOf((*MockStorage)(nil).GetPlatforms), ctx)
}

// GetTask mocks base method.
func (m *MockStorage) GetTask(ctx context.Context, tx pgx.Tx, name string) (model.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTask", ctx, tx, name)
	ret0, _ := ret[0].(model.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTask indicates an expected call of GetTask.
func (mr *MockStorageMockRecorder) GetTask(ctx, tx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTask", reflect.TypeOf((*MockStorage)(nil).GetTask), ctx, tx, name)
}

// UpdateTask mocks base method.
func (m *MockStorage) UpdateTask(ctx context.Context, tx pgx.Tx, task model.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTask", ctx, tx, task)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTask indicates an expected call of UpdateTask.
func (mr *MockStorageMockRecorder) UpdateTask(ctx, tx, task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTask", reflect.TypeOf((*MockStorage)(nil).UpdateTask), ctx, tx, task)
}

// MockIGDBClient is a mock of IGDBClient interface.
type MockIGDBClient struct {
	ctrl     *gomock.Controller
	recorder *MockIGDBClientMockRecorder
	isgomock struct{}
}

// MockIGDBClientMockRecorder is the mock recorder for MockIGDBClient.
type MockIGDBClientMockRecorder struct {
	mock *MockIGDBClient
}

// NewMockIGDBClient creates a new mock instance.
func NewMockIGDBClient(ctrl *gomock.Controller) *MockIGDBClient {
	mock := &MockIGDBClient{ctrl: ctrl}
	mock.recorder = &MockIGDBClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIGDBClient) EXPECT() *MockIGDBClientMockRecorder {
	return m.recorder
}

// GetTopRatedGames mocks base method.
func (m *MockIGDBClient) GetTopRatedGames(ctx context.Context, platformsIDs []int64, releasedAfter time.Time, minRatingsCount, minRating, limit int64) ([]igdb.TopRatedGamesResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopRatedGames", ctx, platformsIDs, releasedAfter, minRatingsCount, minRating, limit)
	ret0, _ := ret[0].([]igdb.TopRatedGamesResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopRatedGames indicates an expected call of GetTopRatedGames.
func (mr *MockIGDBClientMockRecorder) GetTopRatedGames(ctx, platformsIDs, releasedAfter, minRatingsCount, minRating, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopRatedGames", reflect.TypeOf((*MockIGDBClient)(nil).GetTopRatedGames), ctx, platformsIDs, releasedAfter, minRatingsCount, minRating, limit)
}

// MockUploadcareClient is a mock of UploadcareClient interface.
type MockUploadcareClient struct {
	ctrl     *gomock.Controller
	recorder *MockUploadcareClientMockRecorder
	isgomock struct{}
}

// MockUploadcareClientMockRecorder is the mock recorder for MockUploadcareClient.
type MockUploadcareClientMockRecorder struct {
	mock *MockUploadcareClient
}

// NewMockUploadcareClient creates a new mock instance.
func NewMockUploadcareClient(ctrl *gomock.Controller) *MockUploadcareClient {
	mock := &MockUploadcareClient{ctrl: ctrl}
	mock.recorder = &MockUploadcareClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUploadcareClient) EXPECT() *MockUploadcareClientMockRecorder {
	return m.recorder
}

// UploadImageFromURL mocks base method.
func (m *MockUploadcareClient) UploadImageFromURL(ctx context.Context, imageURL string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadImageFromURL", ctx, imageURL)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadImageFromURL indicates an expected call of UploadImageFromURL.
func (mr *MockUploadcareClientMockRecorder) UploadImageFromURL(ctx, imageURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadImageFromURL", reflect.TypeOf((*MockUploadcareClient)(nil).UploadImageFromURL), ctx, imageURL)
}
