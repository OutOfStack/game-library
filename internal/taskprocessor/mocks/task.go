// Code generated by MockGen. DO NOT EDIT.
// Source: internal/taskprocessor/task.go
//
// Generated by this command:
//
//	mockgen -source=internal/taskprocessor/task.go -destination=internal/taskprocessor/mocks/task.go -package=taskprocessor_mock
//

// Package taskprocessor_mock is a generated GoMock package.
package taskprocessor_mock

import (
	context "context"
	io "io"
	reflect "reflect"
	time "time"

	model "github.com/OutOfStack/game-library/internal/app/game-library-api/model"
	igdbapi "github.com/OutOfStack/game-library/internal/client/igdbapi"
	s3 "github.com/OutOfStack/game-library/internal/client/s3"
	gomock "go.uber.org/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
	isgomock struct{}
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// CreateCompany mocks base method.
func (m *MockStorage) CreateCompany(ctx context.Context, c model.Company) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCompany", ctx, c)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCompany indicates an expected call of CreateCompany.
func (mr *MockStorageMockRecorder) CreateCompany(ctx, c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCompany", reflect.TypeOf((*MockStorage)(nil).CreateCompany), ctx, c)
}

// CreateGame mocks base method.
func (m *MockStorage) CreateGame(ctx context.Context, cgd model.CreateGameData) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGame", ctx, cgd)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGame indicates an expected call of CreateGame.
func (mr *MockStorageMockRecorder) CreateGame(ctx, cgd any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGame", reflect.TypeOf((*MockStorage)(nil).CreateGame), ctx, cgd)
}

// CreateGenre mocks base method.
func (m *MockStorage) CreateGenre(ctx context.Context, g model.Genre) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGenre", ctx, g)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGenre indicates an expected call of CreateGenre.
func (mr *MockStorageMockRecorder) CreateGenre(ctx, g any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGenre", reflect.TypeOf((*MockStorage)(nil).CreateGenre), ctx, g)
}

// GetCompanies mocks base method.
func (m *MockStorage) GetCompanies(ctx context.Context) ([]model.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompanies", ctx)
	ret0, _ := ret[0].([]model.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompanies indicates an expected call of GetCompanies.
func (mr *MockStorageMockRecorder) GetCompanies(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompanies", reflect.TypeOf((*MockStorage)(nil).GetCompanies), ctx)
}

// GetGameByID mocks base method.
func (m *MockStorage) GetGameByID(ctx context.Context, id int32) (model.Game, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGameByID", ctx, id)
	ret0, _ := ret[0].(model.Game)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGameByID indicates an expected call of GetGameByID.
func (mr *MockStorageMockRecorder) GetGameByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGameByID", reflect.TypeOf((*MockStorage)(nil).GetGameByID), ctx, id)
}

// GetGameIDByIGDBID mocks base method.
func (m *MockStorage) GetGameIDByIGDBID(ctx context.Context, igdbID int64) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGameIDByIGDBID", ctx, igdbID)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGameIDByIGDBID indicates an expected call of GetGameIDByIGDBID.
func (mr *MockStorageMockRecorder) GetGameIDByIGDBID(ctx, igdbID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGameIDByIGDBID", reflect.TypeOf((*MockStorage)(nil).GetGameIDByIGDBID), ctx, igdbID)
}

// GetGamesIDsAfterID mocks base method.
func (m *MockStorage) GetGamesIDsAfterID(ctx context.Context, lastID int32, batchSize int) ([]int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGamesIDsAfterID", ctx, lastID, batchSize)
	ret0, _ := ret[0].([]int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGamesIDsAfterID indicates an expected call of GetGamesIDsAfterID.
func (mr *MockStorageMockRecorder) GetGamesIDsAfterID(ctx, lastID, batchSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGamesIDsAfterID", reflect.TypeOf((*MockStorage)(nil).GetGamesIDsAfterID), ctx, lastID, batchSize)
}

// GetGenres mocks base method.
func (m *MockStorage) GetGenres(ctx context.Context) ([]model.Genre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGenres", ctx)
	ret0, _ := ret[0].([]model.Genre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGenres indicates an expected call of GetGenres.
func (mr *MockStorageMockRecorder) GetGenres(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGenres", reflect.TypeOf((*MockStorage)(nil).GetGenres), ctx)
}

// GetPlatforms mocks base method.
func (m *MockStorage) GetPlatforms(ctx context.Context) ([]model.Platform, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlatforms", ctx)
	ret0, _ := ret[0].([]model.Platform)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlatforms indicates an expected call of GetPlatforms.
func (mr *MockStorageMockRecorder) GetPlatforms(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlatforms", reflect.TypeOf((*MockStorage)(nil).GetPlatforms), ctx)
}

// GetTask mocks base method.
func (m *MockStorage) GetTask(ctx context.Context, name string) (model.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTask", ctx, name)
	ret0, _ := ret[0].(model.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTask indicates an expected call of GetTask.
func (mr *MockStorageMockRecorder) GetTask(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTask", reflect.TypeOf((*MockStorage)(nil).GetTask), ctx, name)
}

// RunWithTx mocks base method.
func (m *MockStorage) RunWithTx(ctx context.Context, f func(context.Context) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunWithTx", ctx, f)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunWithTx indicates an expected call of RunWithTx.
func (mr *MockStorageMockRecorder) RunWithTx(ctx, f any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunWithTx", reflect.TypeOf((*MockStorage)(nil).RunWithTx), ctx, f)
}

// UpdateGameIGDBInfo mocks base method.
func (m *MockStorage) UpdateGameIGDBInfo(ctx context.Context, id int32, ug model.UpdateGameIGDBData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGameIGDBInfo", ctx, id, ug)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGameIGDBInfo indicates an expected call of UpdateGameIGDBInfo.
func (mr *MockStorageMockRecorder) UpdateGameIGDBInfo(ctx, id, ug any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGameIGDBInfo", reflect.TypeOf((*MockStorage)(nil).UpdateGameIGDBInfo), ctx, id, ug)
}

// UpdateTask mocks base method.
func (m *MockStorage) UpdateTask(ctx context.Context, task model.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTask", ctx, task)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTask indicates an expected call of UpdateTask.
func (mr *MockStorageMockRecorder) UpdateTask(ctx, task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTask", reflect.TypeOf((*MockStorage)(nil).UpdateTask), ctx, task)
}

// MockIGDBAPIClient is a mock of IGDBAPIClient interface.
type MockIGDBAPIClient struct {
	ctrl     *gomock.Controller
	recorder *MockIGDBAPIClientMockRecorder
	isgomock struct{}
}

// MockIGDBAPIClientMockRecorder is the mock recorder for MockIGDBAPIClient.
type MockIGDBAPIClientMockRecorder struct {
	mock *MockIGDBAPIClient
}

// NewMockIGDBAPIClient creates a new mock instance.
func NewMockIGDBAPIClient(ctrl *gomock.Controller) *MockIGDBAPIClient {
	mock := &MockIGDBAPIClient{ctrl: ctrl}
	mock.recorder = &MockIGDBAPIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIGDBAPIClient) EXPECT() *MockIGDBAPIClientMockRecorder {
	return m.recorder
}

// GetGameInfoForUpdate mocks base method.
func (m *MockIGDBAPIClient) GetGameInfoForUpdate(ctx context.Context, igdbID int64) (igdbapi.GameInfoForUpdate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGameInfoForUpdate", ctx, igdbID)
	ret0, _ := ret[0].(igdbapi.GameInfoForUpdate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGameInfoForUpdate indicates an expected call of GetGameInfoForUpdate.
func (mr *MockIGDBAPIClientMockRecorder) GetGameInfoForUpdate(ctx, igdbID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGameInfoForUpdate", reflect.TypeOf((*MockIGDBAPIClient)(nil).GetGameInfoForUpdate), ctx, igdbID)
}

// GetImageByURL mocks base method.
func (m *MockIGDBAPIClient) GetImageByURL(ctx context.Context, imageURL, imageType string) (igdbapi.GetImageResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageByURL", ctx, imageURL, imageType)
	ret0, _ := ret[0].(igdbapi.GetImageResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageByURL indicates an expected call of GetImageByURL.
func (mr *MockIGDBAPIClientMockRecorder) GetImageByURL(ctx, imageURL, imageType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageByURL", reflect.TypeOf((*MockIGDBAPIClient)(nil).GetImageByURL), ctx, imageURL, imageType)
}

// GetTopRatedGames mocks base method.
func (m *MockIGDBAPIClient) GetTopRatedGames(ctx context.Context, platformsIDs []int64, releasedAfter time.Time, minRatingsCount, minRating, limit int64) ([]igdbapi.TopRatedGames, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopRatedGames", ctx, platformsIDs, releasedAfter, minRatingsCount, minRating, limit)
	ret0, _ := ret[0].([]igdbapi.TopRatedGames)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopRatedGames indicates an expected call of GetTopRatedGames.
func (mr *MockIGDBAPIClientMockRecorder) GetTopRatedGames(ctx, platformsIDs, releasedAfter, minRatingsCount, minRating, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopRatedGames", reflect.TypeOf((*MockIGDBAPIClient)(nil).GetTopRatedGames), ctx, platformsIDs, releasedAfter, minRatingsCount, minRating, limit)
}

// MockS3Client is a mock of S3Client interface.
type MockS3Client struct {
	ctrl     *gomock.Controller
	recorder *MockS3ClientMockRecorder
	isgomock struct{}
}

// MockS3ClientMockRecorder is the mock recorder for MockS3Client.
type MockS3ClientMockRecorder struct {
	mock *MockS3Client
}

// NewMockS3Client creates a new mock instance.
func NewMockS3Client(ctrl *gomock.Controller) *MockS3Client {
	mock := &MockS3Client{ctrl: ctrl}
	mock.recorder = &MockS3ClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockS3Client) EXPECT() *MockS3ClientMockRecorder {
	return m.recorder
}

// Upload mocks base method.
func (m *MockS3Client) Upload(ctx context.Context, data io.ReadSeeker, contentType string, md map[string]string) (s3.UploadResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upload", ctx, data, contentType, md)
	ret0, _ := ret[0].(s3.UploadResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upload indicates an expected call of Upload.
func (mr *MockS3ClientMockRecorder) Upload(ctx, data, contentType, md any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockS3Client)(nil).Upload), ctx, data, contentType, md)
}

// MockGameFacade is a mock of GameFacade interface.
type MockGameFacade struct {
	ctrl     *gomock.Controller
	recorder *MockGameFacadeMockRecorder
	isgomock struct{}
}

// MockGameFacadeMockRecorder is the mock recorder for MockGameFacade.
type MockGameFacadeMockRecorder struct {
	mock *MockGameFacade
}

// NewMockGameFacade creates a new mock instance.
func NewMockGameFacade(ctrl *gomock.Controller) *MockGameFacade {
	mock := &MockGameFacade{ctrl: ctrl}
	mock.recorder = &MockGameFacadeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGameFacade) EXPECT() *MockGameFacadeMockRecorder {
	return m.recorder
}

// UpdateGameTrendingIndex mocks base method.
func (m *MockGameFacade) UpdateGameTrendingIndex(ctx context.Context, gameID int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGameTrendingIndex", ctx, gameID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGameTrendingIndex indicates an expected call of UpdateGameTrendingIndex.
func (mr *MockGameFacadeMockRecorder) UpdateGameTrendingIndex(ctx, gameID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGameTrendingIndex", reflect.TypeOf((*MockGameFacade)(nil).UpdateGameTrendingIndex), ctx, gameID)
}
